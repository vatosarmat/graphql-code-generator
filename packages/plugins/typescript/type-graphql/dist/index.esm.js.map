{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/typescript/type-graphql/src/visitor.js","../../../dist/plugins/typescript/type-graphql/src/index.js"],"sourcesContent":["import { transformComment, indent, DeclarationBlock, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { GraphQLEnumType, } from 'graphql';\nimport { TypeScriptOperationVariablesToObject, TsVisitor, } from '@graphql-codegen/typescript';\nconst MAYBE_REGEX = /^Maybe<(.*?)>$/;\nconst ARRAY_REGEX = /^Array<(.*?)>$/;\nconst SCALAR_REGEX = /^Scalars\\['(.*?)'\\]$/;\nconst GRAPHQL_TYPES = ['Query', 'Mutation', 'Subscription'];\nconst SCALARS = ['ID', 'String', 'Boolean', 'Int', 'Float'];\nconst TYPE_GRAPHQL_SCALARS = ['ID', 'Int', 'Float'];\nexport class TypeGraphQLVisitor extends TsVisitor {\n    constructor(schema, pluginConfig, additionalConfig = {}) {\n        super(schema, pluginConfig, {\n            avoidOptionals: pluginConfig.avoidOptionals || false,\n            maybeValue: pluginConfig.maybeValue || 'T | null',\n            constEnums: pluginConfig.constEnums || false,\n            enumsAsTypes: pluginConfig.enumsAsTypes || false,\n            immutableTypes: pluginConfig.immutableTypes || false,\n            declarationKind: {\n                type: 'class',\n                interface: 'abstract class',\n                arguments: 'class',\n                input: 'class',\n                scalar: 'type',\n            },\n            decoratorName: {\n                type: 'ObjectType',\n                interface: 'InterfaceType',\n                arguments: 'ArgsType',\n                field: 'Field',\n                input: 'InputType',\n                ...(pluginConfig.decoratorName || {}),\n            },\n            ...(additionalConfig || {}),\n        });\n        autoBind(this);\n        const enumNames = Object.values(schema.getTypeMap())\n            .map(type => (type instanceof GraphQLEnumType ? type.name : undefined))\n            .filter(t => t);\n        this.setArgumentsTransformer(new TypeScriptOperationVariablesToObject(this.scalars, this.convertName, this.config.avoidOptionals.object, this.config.immutableTypes, null, enumNames, this.config.enumPrefix, this.config.enumValues));\n        this.setDeclarationBlockConfig({\n            enumNameValueSeparator: ' =',\n        });\n    }\n    ObjectTypeDefinition(node, key, parent) {\n        const typeDecorator = this.config.decoratorName.type;\n        const originalNode = parent[key];\n        let declarationBlock = this.getObjectTypeDeclarationBlock(node, originalNode);\n        if (!GRAPHQL_TYPES.includes(node.name)) {\n            // Add type-graphql ObjectType decorator\n            const interfaces = originalNode.interfaces.map(i => this.convertName(i));\n            let decoratorOptions = '';\n            if (interfaces.length > 1) {\n                decoratorOptions = `{ implements: [${interfaces.join(', ')}] }`;\n            }\n            else if (interfaces.length === 1) {\n                decoratorOptions = `{ implements: ${interfaces[0]} }`;\n            }\n            declarationBlock = declarationBlock.withDecorator(`@TypeGraphQL.${typeDecorator}(${decoratorOptions})`);\n        }\n        return [declarationBlock.string, this.buildArgumentsBlock(originalNode)].filter(f => f).join('\\n\\n');\n    }\n    InputObjectTypeDefinition(node) {\n        const typeDecorator = this.config.decoratorName.input;\n        let declarationBlock = this.getInputObjectDeclarationBlock(node);\n        // Add type-graphql InputType decorator\n        declarationBlock = declarationBlock.withDecorator(`@TypeGraphQL.${typeDecorator}()`);\n        return declarationBlock.string;\n    }\n    getArgumentsObjectDeclarationBlock(node, name, field) {\n        return new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind(this._parsedConfig.declarationKind.arguments)\n            .withName(this.convertName(name))\n            .withComment(node.description)\n            .withBlock(field.arguments.map(argument => this.InputValueDefinition(argument)).join('\\n'));\n    }\n    getArgumentsObjectTypeDefinition(node, name, field) {\n        const typeDecorator = this.config.decoratorName.arguments;\n        let declarationBlock = this.getArgumentsObjectDeclarationBlock(node, name, field);\n        // Add type-graphql Args decorator\n        declarationBlock = declarationBlock.withDecorator(`@TypeGraphQL.${typeDecorator}()`);\n        return declarationBlock.string;\n    }\n    InterfaceTypeDefinition(node, key, parent) {\n        const interfaceDecorator = this.config.decoratorName.interface;\n        const originalNode = parent[key];\n        const declarationBlock = this.getInterfaceTypeDeclarationBlock(node, originalNode).withDecorator(`@TypeGraphQL.${interfaceDecorator}()`);\n        return [declarationBlock.string, this.buildArgumentsBlock(originalNode)].filter(f => f).join('\\n\\n');\n    }\n    buildTypeString(type) {\n        if (!type.isArray && !type.isScalar && !type.isNullable) {\n            type.type = `FixDecorator<${type.type}>`;\n        }\n        if (type.isScalar) {\n            type.type = `Scalars['${type.type}']`;\n        }\n        if (type.isArray) {\n            type.type = `Array<${type.type}>`;\n        }\n        if (type.isNullable) {\n            type.type = `Maybe<${type.type}>`;\n        }\n        return type.type;\n    }\n    parseType(rawType) {\n        const typeNode = rawType;\n        if (typeNode.kind === 'NamedType') {\n            return {\n                type: typeNode.name.value,\n                isNullable: true,\n                isArray: false,\n                isScalar: SCALARS.includes(typeNode.name.value),\n            };\n        }\n        else if (typeNode.kind === 'NonNullType') {\n            return {\n                ...this.parseType(typeNode.type),\n                isNullable: false,\n            };\n        }\n        else if (typeNode.kind === 'ListType') {\n            return {\n                ...this.parseType(typeNode.type),\n                isArray: true,\n                isNullable: true,\n            };\n        }\n        const isNullable = !!rawType.match(MAYBE_REGEX);\n        const nonNullableType = rawType.replace(MAYBE_REGEX, '$1');\n        const isArray = !!nonNullableType.match(ARRAY_REGEX);\n        const singularType = nonNullableType.replace(ARRAY_REGEX, '$1');\n        const isScalar = !!singularType.match(SCALAR_REGEX);\n        const type = singularType.replace(SCALAR_REGEX, (match, type) => {\n            if (TYPE_GRAPHQL_SCALARS.includes(type)) {\n                // This is a TypeGraphQL type\n                return `TypeGraphQL.${type}`;\n            }\n            else if (global[type]) {\n                // This is a JS native type\n                return type;\n            }\n            else if (this.scalars[type]) {\n                // This is a type specified in the configuration\n                return this.scalars[type];\n            }\n            else {\n                throw new Error(`Unknown scalar type ${type}`);\n            }\n        });\n        return { type, isNullable, isArray, isScalar };\n    }\n    fixDecorator(type, typeString) {\n        return type.isArray || type.isNullable || type.isScalar ? typeString : `FixDecorator<${typeString}>`;\n    }\n    FieldDefinition(node, key, parent) {\n        const fieldDecorator = this.config.decoratorName.field;\n        let typeString = node.type;\n        const comment = transformComment(node.description, 1);\n        const type = this.parseType(typeString);\n        const maybeType = type.type.match(MAYBE_REGEX);\n        const arrayType = `[${maybeType ? this.clearOptional(type.type) : type.type}]`;\n        const decorator = '\\n' +\n            indent(`@TypeGraphQL.${fieldDecorator}(type => ${type.isArray ? arrayType : type.type}${type.isNullable ? ', { nullable: true }' : ''})`) +\n            '\\n';\n        typeString = this.fixDecorator(type, typeString);\n        return (comment + decorator + indent(`${this.config.immutableTypes ? 'readonly ' : ''}${node.name}!: ${typeString};`));\n    }\n    InputValueDefinition(node, key, parent) {\n        const fieldDecorator = this.config.decoratorName.field;\n        const rawType = node.type;\n        const comment = transformComment(node.description, 1);\n        const type = this.parseType(rawType);\n        const typeGraphQLType = type.isScalar && TYPE_GRAPHQL_SCALARS.includes(type.type) ? `TypeGraphQL.${type.type}` : type.type;\n        const decorator = '\\n' +\n            indent(`@TypeGraphQL.${fieldDecorator}(type => ${type.isArray ? `[${typeGraphQLType}]` : typeGraphQLType}${type.isNullable ? ', { nullable: true }' : ''})`) +\n            '\\n';\n        const nameString = node.name.kind ? node.name.value : node.name;\n        const typeString = rawType.kind\n            ? this.buildTypeString(type)\n            : this.fixDecorator(type, rawType);\n        return (comment + decorator + indent(`${this.config.immutableTypes ? 'readonly ' : ''}${nameString}!: ${typeString};`));\n    }\n    EnumTypeDefinition(node) {\n        return (super.EnumTypeDefinition(node) +\n            `TypeGraphQL.registerEnumType(${this.convertName(node)}, { name: '${this.convertName(node)}' });\\n`);\n    }\n    clearOptional(str) {\n        if (str.startsWith('Maybe')) {\n            return str.replace(/Maybe<(.*?)>$/, '$1');\n        }\n        return str;\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { parse, printSchema, visit } from 'graphql';\nimport { TypeGraphQLVisitor } from './visitor';\nimport { TsIntrospectionVisitor, includeIntrospectionDefinitions } from '@graphql-codegen/typescript';\nexport * from './visitor';\nconst TYPE_GRAPHQL_IMPORT = `import * as TypeGraphQL from 'type-graphql';`;\nconst DECORATOR_FIX = `type FixDecorator<T> = T;`;\nconst isDefinitionInterface = (definition) => definition.includes('@TypeGraphQL.InterfaceType()');\nexport const plugin = (schema, documents, config) => {\n    const visitor = new TypeGraphQLVisitor(schema, config);\n    const printedSchema = printSchema(schema);\n    const astNode = parse(printedSchema);\n    const maybeValue = `export type Maybe<T> = ${visitor.config.maybeValue};`;\n    const visitorResult = visit(astNode, { leave: visitor });\n    const introspectionDefinitions = includeIntrospectionDefinitions(schema, documents, config);\n    const scalars = visitor.scalarsDefinition;\n    const definitions = visitorResult.definitions;\n    // Sort output by interfaces first, classes last to prevent TypeScript errors\n    definitions.sort((definition1, definition2) => +isDefinitionInterface(definition2) - +isDefinitionInterface(definition1));\n    return {\n        prepend: [...visitor.getEnumsImports(), maybeValue, TYPE_GRAPHQL_IMPORT, DECORATOR_FIX],\n        content: [scalars, ...definitions, ...introspectionDefinitions].join('\\n'),\n    };\n};\nexport { TsIntrospectionVisitor };\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}