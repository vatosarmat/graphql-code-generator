{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/typescript/document-nodes/src/visitor.js","../../../dist/plugins/typescript/document-nodes/src/index.js"],"sourcesContent":["import autoBind from 'auto-bind';\nimport { getConfigValue, ClientSideBaseVisitor, } from '@graphql-codegen/visitor-plugin-common';\nexport class TypeScriptDocumentNodesVisitor extends ClientSideBaseVisitor {\n    constructor(schema, fragments, rawConfig, documents) {\n        const additionalConfig = {\n            documentVariablePrefix: getConfigValue(rawConfig.namePrefix, ''),\n            documentVariableSuffix: getConfigValue(rawConfig.nameSuffix, ''),\n            fragmentVariablePrefix: getConfigValue(rawConfig.fragmentPrefix, ''),\n            fragmentVariableSuffix: getConfigValue(rawConfig.fragmentSuffix, ''),\n        };\n        super(schema, fragments, rawConfig, additionalConfig, documents);\n        autoBind(this);\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { visit, concatAST, Kind } from 'graphql';\nimport { TypeScriptDocumentNodesVisitor } from './visitor';\nexport const plugin = (schema, documents, config) => {\n    const allAst = concatAST(documents.map(v => v.document));\n    const allFragments = [\n        ...allAst.definitions.filter(d => d.kind === Kind.FRAGMENT_DEFINITION).map(fragmentDef => ({\n            node: fragmentDef,\n            name: fragmentDef.name.value,\n            onType: fragmentDef.typeCondition.name.value,\n            isExternal: false,\n        })),\n        ...(config.externalFragments || []),\n    ];\n    const visitor = new TypeScriptDocumentNodesVisitor(schema, allFragments, config, documents);\n    const visitorResult = visit(allAst, { leave: visitor });\n    return {\n        prepend: visitor.getImports(),\n        content: [visitor.fragments, ...visitorResult.definitions.filter(t => typeof t === 'string')].join('\\n'),\n    };\n};\nexport const validate = async (schema, documents, config, outputFile) => {\n    if (!outputFile.endsWith('.ts')) {\n        throw new Error(`Plugin \"typescript-document-nodes\" requires extension to be \".ts\"!`);\n    }\n};\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;AAEO,MAAM,8BAA8B,SAAS,qBAAqB,CAAC;AAC1E,IAAI,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE;AACzD,QAAQ,MAAM,gBAAgB,GAAG;AACjC,YAAY,sBAAsB,EAAE,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,CAAC;AAC5E,YAAY,sBAAsB,EAAE,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,CAAC;AAC5E,YAAY,sBAAsB,EAAE,cAAc,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC;AAChF,YAAY,sBAAsB,EAAE,cAAc,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC;AAChF,SAAS,CAAC;AACV,QAAQ,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,gBAAgB,EAAE,SAAS,CAAC,CAAC;AACzE,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,KAAK;AACL;;ACXY,MAAC,MAAM,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,KAAK;AACrD,IAAI,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC7D,IAAI,MAAM,YAAY,GAAG;AACzB,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,WAAW,KAAK;AACnG,YAAY,IAAI,EAAE,WAAW;AAC7B,YAAY,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,KAAK;AACxC,YAAY,MAAM,EAAE,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK;AACxD,YAAY,UAAU,EAAE,KAAK;AAC7B,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,MAAM,CAAC,iBAAiB,IAAI,EAAE,CAAC;AAC3C,KAAK,CAAC;AACN,IAAI,MAAM,OAAO,GAAG,IAAI,8BAA8B,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAChG,IAAI,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AAC5D,IAAI,OAAO;AACX,QAAQ,OAAO,EAAE,OAAO,CAAC,UAAU,EAAE;AACrC,QAAQ,OAAO,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;AAChH,KAAK,CAAC;AACN,EAAE;AACU,MAAC,QAAQ,GAAG,OAAO,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,KAAK;AACzE,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACrC,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,kEAAkE,CAAC,CAAC,CAAC;AAC9F,KAAK;AACL;;;;"}