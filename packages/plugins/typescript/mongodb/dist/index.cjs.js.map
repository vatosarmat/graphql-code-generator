{"version":3,"file":"index.cjs.js","sources":["../../../dist/plugins/typescript/mongodb/src/fields-tree.js","../../../dist/plugins/typescript/mongodb/src/config.js","../../../dist/plugins/typescript/mongodb/src/visitor.js","../../../dist/plugins/typescript/mongodb/src/index.js"],"sourcesContent":["import { indent } from '@graphql-codegen/visitor-plugin-common';\nimport { set } from 'lodash';\nexport class FieldsTree {\n    constructor() {\n        this._fields = {};\n    }\n    addField(path, type) {\n        if (type === undefined) {\n            throw new Error('Did not expect type to be undefined');\n        }\n        set(this._fields, path, type);\n    }\n    _getInnerField(root, level = 1) {\n        if (typeof root === 'string') {\n            return root;\n        }\n        const fields = Object.keys(root).map(fieldName => {\n            const fieldValue = root[fieldName];\n            return indent(`${fieldName}: ${this._getInnerField(fieldValue, level + 1)},`, level);\n        });\n        return level === 1\n            ? fields.join('\\n')\n            : `{\n${fields.join('\\n')}\n${indent('}', level - 1)}`;\n    }\n    get string() {\n        return this._getInnerField(this._fields);\n    }\n}\n//# sourceMappingURL=fields-tree.js.map","export var Directives;\n(function (Directives) {\n    Directives[\"ID\"] = \"id\";\n    Directives[\"ENTITY\"] = \"entity\";\n    Directives[\"ABSTRACT_ENTITY\"] = \"abstractEntity\";\n    Directives[\"UNION\"] = \"union\";\n    Directives[\"LINK\"] = \"link\";\n    Directives[\"COLUMN\"] = \"column\";\n    Directives[\"EMBEDDED\"] = \"embedded\";\n    Directives[\"MAP\"] = \"map\";\n})(Directives || (Directives = {}));\n//# sourceMappingURL=config.js.map","import { FieldsTree } from './fields-tree';\nimport { getBaseTypeNode, DeclarationBlock, getConfigValue, BaseVisitor, buildScalars, DEFAULT_SCALARS, } from '@graphql-codegen/visitor-plugin-common';\nimport { TypeScriptOperationVariablesToObject } from '@graphql-codegen/typescript';\nimport autoBind from 'auto-bind';\nimport { Directives } from './config';\nimport { Kind, isEnumType, } from 'graphql';\nfunction resolveObjectId(pointer) {\n    if (!pointer) {\n        return { identifier: 'ObjectID', module: 'mongodb' };\n    }\n    if (pointer.includes('#')) {\n        const [path, module] = pointer.split('#');\n        return { identifier: path, module };\n    }\n    return {\n        identifier: pointer,\n        module: null,\n    };\n}\nexport class TsMongoVisitor extends BaseVisitor {\n    constructor(_schema, pluginConfig) {\n        super(pluginConfig, {\n            dbTypeSuffix: pluginConfig.dbTypeSuffix || 'DbObject',\n            dbInterfaceSuffix: pluginConfig.dbInterfaceSuffix || 'DbInterface',\n            objectIdType: resolveObjectId(pluginConfig.objectIdType).identifier,\n            objectIdImport: resolveObjectId(pluginConfig.objectIdType).module,\n            idFieldName: pluginConfig.idFieldName || '_id',\n            enumsAsString: getConfigValue(pluginConfig.enumsAsString, true),\n            avoidOptionals: getConfigValue(pluginConfig.avoidOptionals, false),\n            scalars: buildScalars(_schema, pluginConfig.scalars, DEFAULT_SCALARS),\n        });\n        this._schema = _schema;\n        autoBind(this);\n        this._variablesTransformer = new TypeScriptOperationVariablesToObject(this.scalars, this.convertName, false, false);\n    }\n    get objectIdImport() {\n        if (this.config.objectIdImport === null) {\n            return null;\n        }\n        return `import { ${this.config.objectIdType} } from '${this.config.objectIdImport}';`;\n    }\n    _resolveDirectiveValue(valueNode) {\n        switch (valueNode.kind) {\n            case Kind.INT:\n            case Kind.STRING:\n            case Kind.FLOAT:\n            case Kind.BOOLEAN:\n            case Kind.ENUM:\n                return valueNode.value;\n            case Kind.LIST:\n                return valueNode.values.map(v => this._resolveDirectiveValue(v));\n            case Kind.NULL:\n                return null;\n            case Kind.OBJECT:\n                return valueNode.fields.reduce((prev, f) => {\n                    return {\n                        ...prev,\n                        [f.name.value]: this._resolveDirectiveValue(f.value),\n                    };\n                }, {});\n            default:\n                return undefined;\n        }\n    }\n    _getDirectiveArgValue(node, argName) {\n        if (!node || !node.arguments || node.arguments.length === 0) {\n            return undefined;\n        }\n        const foundArgument = node.arguments.find(a => a.name.value === argName);\n        if (!foundArgument) {\n            return undefined;\n        }\n        return this._resolveDirectiveValue(foundArgument.value);\n    }\n    _getDirectiveFromAstNode(node, directiveName) {\n        if (!node || !node.directives || node.directives.length === 0) {\n            return null;\n        }\n        const foundDirective = node.directives.find(d => d.name === directiveName || (d.name.value && d.name.value === directiveName));\n        if (!foundDirective) {\n            return null;\n        }\n        return foundDirective;\n    }\n    _buildInterfaces(interfaces) {\n        return (interfaces || [])\n            .map(namedType => {\n            const schemaType = this._schema.getType(namedType.name.value);\n            const abstractEntityDirective = this._getDirectiveFromAstNode(schemaType.astNode, Directives.ABSTRACT_ENTITY);\n            if (!abstractEntityDirective) {\n                return null;\n            }\n            return this.convertName(namedType.name.value, { suffix: this.config.dbInterfaceSuffix });\n        })\n            .filter(a => a);\n    }\n    _handleIdField(fieldNode, tree, addOptionalSign) {\n        tree.addField(`${this.config.idFieldName}${addOptionalSign ? '?' : ''}`, this._variablesTransformer.wrapAstTypeWithModifiers(this.config.objectIdType, fieldNode.type));\n    }\n    _handleLinkField(fieldNode, tree, linkDirective, mapPath, addOptionalSign) {\n        const overrideType = this._getDirectiveArgValue(linkDirective, 'overrideType');\n        const coreType = overrideType || getBaseTypeNode(fieldNode.type);\n        const type = this.convertName(coreType, { suffix: this.config.dbTypeSuffix });\n        tree.addField(`${mapPath || fieldNode.name.value}${addOptionalSign ? '?' : ''}`, this._variablesTransformer.wrapAstTypeWithModifiers(`${type}['${this.config.idFieldName}']`, fieldNode.type));\n    }\n    _handleColumnField(fieldNode, tree, columnDirective, mapPath, addOptionalSign) {\n        const overrideType = this._getDirectiveArgValue(columnDirective, 'overrideType');\n        const coreType = getBaseTypeNode(fieldNode.type);\n        let type = null;\n        if (this.scalars[coreType.name.value]) {\n            type = this.scalars[coreType.name.value];\n        }\n        else {\n            const schemaType = this._schema.getType(coreType.name.value);\n            if (isEnumType(schemaType) && this.config.enumsAsString) {\n                type = this.scalars.String;\n            }\n            else {\n                type = coreType.name.value;\n            }\n        }\n        tree.addField(`${mapPath || fieldNode.name.value}${addOptionalSign ? '?' : ''}`, overrideType || this._variablesTransformer.wrapAstTypeWithModifiers(type, fieldNode.type));\n    }\n    _handleEmbeddedField(fieldNode, tree, mapPath, addOptionalSign) {\n        const coreType = getBaseTypeNode(fieldNode.type);\n        const type = this.convertName(coreType, { suffix: this.config.dbTypeSuffix });\n        tree.addField(`${mapPath || fieldNode.name.value}${addOptionalSign ? '?' : ''}`, this._variablesTransformer.wrapAstTypeWithModifiers(type, fieldNode.type));\n    }\n    _buildFieldsTree(fields) {\n        const tree = new FieldsTree();\n        fields.forEach(field => {\n            const idDirective = this._getDirectiveFromAstNode(field, Directives.ID);\n            const linkDirective = this._getDirectiveFromAstNode(field, Directives.LINK);\n            const columnDirective = this._getDirectiveFromAstNode(field, Directives.COLUMN);\n            const embeddedDirective = this._getDirectiveFromAstNode(field, Directives.EMBEDDED);\n            const mapDirective = this._getDirectiveFromAstNode(field, Directives.MAP);\n            const mapPath = this._getDirectiveArgValue(mapDirective, 'path');\n            const addOptionalSign = !this.config.avoidOptionals && field.type.kind !== Kind.NON_NULL_TYPE;\n            if (idDirective) {\n                this._handleIdField(field, tree, addOptionalSign);\n            }\n            else if (linkDirective) {\n                this._handleLinkField(field, tree, linkDirective, mapPath, addOptionalSign);\n            }\n            else if (columnDirective) {\n                this._handleColumnField(field, tree, columnDirective, mapPath, addOptionalSign);\n            }\n            else if (embeddedDirective) {\n                this._handleEmbeddedField(field, tree, mapPath, addOptionalSign);\n            }\n        });\n        return tree;\n    }\n    _addAdditionalFields(tree, additioalFields) {\n        if (!additioalFields || additioalFields.length === 0) {\n            return;\n        }\n        for (const field of additioalFields) {\n            tree.addField(field.path, field.type);\n        }\n    }\n    InterfaceTypeDefinition(node) {\n        const abstractEntityDirective = this._getDirectiveFromAstNode(node, Directives.ABSTRACT_ENTITY);\n        if (abstractEntityDirective === null) {\n            return null;\n        }\n        const discriminatorField = this._getDirectiveArgValue(abstractEntityDirective, 'discriminatorField');\n        const additionalFields = this._getDirectiveArgValue(abstractEntityDirective, 'additionalFields');\n        const fields = this._buildFieldsTree(node.fields);\n        fields.addField(discriminatorField, this.scalars.String);\n        this._addAdditionalFields(fields, additionalFields);\n        return new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('type')\n            .withName(this.convertName(node, { suffix: this.config.dbInterfaceSuffix }))\n            .withBlock(fields.string).string;\n    }\n    UnionTypeDefinition(node) {\n        const unionDirective = this._getDirectiveFromAstNode(node, Directives.UNION);\n        if (unionDirective === null) {\n            return null;\n        }\n        const discriminatorField = this._getDirectiveArgValue(unionDirective, 'discriminatorField');\n        const possibleTypes = node.types\n            .map(namedType => {\n            const schemaType = this._schema.getType(namedType.name.value);\n            const entityDirective = this._getDirectiveFromAstNode(schemaType.astNode, Directives.ENTITY);\n            const abstractEntityDirective = this._getDirectiveFromAstNode(schemaType.astNode, Directives.ABSTRACT_ENTITY);\n            if (entityDirective) {\n                return this.convertName(namedType, { suffix: this.config.dbTypeSuffix });\n            }\n            else if (abstractEntityDirective) {\n                return this.convertName(namedType, { suffix: this.config.dbInterfaceSuffix });\n            }\n            return null;\n        })\n            .filter(a => a);\n        if (possibleTypes.length === 0) {\n            return null;\n        }\n        const additionalFields = this._getDirectiveArgValue(unionDirective, 'additionalFields');\n        const fields = new FieldsTree();\n        fields.addField(discriminatorField, this.scalars.String);\n        this._addAdditionalFields(fields, additionalFields);\n        return new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('type')\n            .withName(this.convertName(node, { suffix: this.config.dbTypeSuffix }))\n            .withContent(`(${possibleTypes.join(' | ')}) & `)\n            .withBlock(fields.string).string;\n    }\n    ObjectTypeDefinition(node) {\n        const entityDirective = this._getDirectiveFromAstNode(node, Directives.ENTITY);\n        if (entityDirective === null) {\n            return null;\n        }\n        const implementingInterfaces = this._buildInterfaces(node.interfaces);\n        const fields = this._buildFieldsTree(node.fields);\n        const additionalFields = this._getDirectiveArgValue(entityDirective, 'additionalFields');\n        this._addAdditionalFields(fields, additionalFields);\n        return new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('type')\n            .withName(this.convertName(node, { suffix: this.config.dbTypeSuffix }))\n            .withContent(implementingInterfaces.length ? implementingInterfaces.join(' & ') + ' & ' : '')\n            .withBlock(fields.string).string;\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { parse, visit } from 'graphql';\nimport { printSchemaWithDirectives } from '@graphql-tools/utils';\nimport { extname } from 'path';\nimport gql from 'graphql-tag';\nimport { TsMongoVisitor } from './visitor';\nimport { Directives } from './config';\nexport const plugin = (schema, documents, config) => {\n    const visitor = new TsMongoVisitor(schema, config);\n    const printedSchema = printSchemaWithDirectives(schema);\n    const astNode = parse(printedSchema);\n    const visitorResult = visit(astNode, { leave: visitor });\n    const header = visitor.objectIdImport;\n    return [header, ...visitorResult.definitions.filter(d => typeof d === 'string')].join('\\n');\n};\nexport const DIRECTIVES = gql `\n  directive @${Directives.UNION}(discriminatorField: String, additionalFields: [AdditionalEntityFields]) on UNION\n  directive @${Directives.ABSTRACT_ENTITY}(discriminatorField: String!, additionalFields: [AdditionalEntityFields]) on INTERFACE\n  directive @${Directives.ENTITY}(embedded: Boolean, additionalFields: [AdditionalEntityFields]) on OBJECT\n  directive @${Directives.COLUMN}(overrideType: String) on FIELD_DEFINITION\n  directive @${Directives.ID} on FIELD_DEFINITION\n  directive @${Directives.LINK}(overrideType: String) on FIELD_DEFINITION\n  directive @${Directives.EMBEDDED} on FIELD_DEFINITION\n  directive @${Directives.MAP}(path: String!) on FIELD_DEFINITION\n  # Inputs\n  input AdditionalEntityFields {\n    path: String\n    type: String\n  }\n`;\nexport const addToSchema = DIRECTIVES;\nexport const validate = async (schema, documents, config, outputFile) => {\n    if (extname(outputFile) !== '.ts' && extname(outputFile) !== '.tsx') {\n        throw new Error(`Plugin \"typescript-mongodb\" requires extension to be \".ts\" or \".tsx\"!`);\n    }\n};\n//# sourceMappingURL=index.js.map"],"names":["set","indent","BaseVisitor","getConfigValue","buildScalars","DEFAULT_SCALARS","TypeScriptOperationVariablesToObject","Kind","getBaseTypeNode","isEnumType","DeclarationBlock","printSchemaWithDirectives","parse","visit","extname"],"mappings":"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"}