{"version":3,"file":"index.cjs.js","sources":["../../../dist/plugins/c-sharp/common/scalars.js","../../../dist/plugins/c-sharp/common/utils.js","../../../dist/plugins/c-sharp/c-sharp-operations/src/visitor.js","../../../dist/plugins/c-sharp/c-sharp-operations/src/index.js"],"sourcesContent":["export const C_SHARP_SCALARS = {\n    ID: 'string',\n    String: 'string',\n    Boolean: 'bool',\n    Int: 'int',\n    Float: 'float',\n    Date: 'DateTime',\n};\n// All native C# built-in value types\n// See https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types\nexport const csharpNativeValueTypes = [\n    'bool',\n    'byte',\n    'sbyte',\n    'char',\n    'decimal',\n    'double',\n    'float',\n    'int',\n    'uint',\n    'long',\n    'ulong',\n    'short',\n    'ushort',\n];\n//# sourceMappingURL=scalars.js.map","import { Kind } from 'graphql';\nimport { indent } from '@graphql-codegen/visitor-plugin-common';\nimport { csharpNativeValueTypes } from './scalars';\nexport function transformComment(comment, indentLevel = 0) {\n    if (!comment) {\n        return '';\n    }\n    if (isStringValueNode(comment)) {\n        comment = comment.value;\n    }\n    comment = comment.trimStart().split('*/').join('*\\\\/');\n    let lines = comment.split('\\n');\n    lines = ['/// <summary>', ...lines.map(line => `/// ${line}`), '/// </summary>'];\n    return lines\n        .map(line => indent(line, indentLevel))\n        .concat('')\n        .join('\\n');\n}\nfunction isStringValueNode(node) {\n    return node && typeof node === 'object' && node.kind === Kind.STRING;\n}\nexport function isValueType(type) {\n    // Limitation: only checks the list of known built in value types\n    // Eg .NET types and struct types won't be detected correctly\n    return csharpNativeValueTypes.includes(type);\n}\nexport function getListTypeField(typeNode) {\n    if (typeNode.kind === Kind.LIST_TYPE) {\n        return {\n            required: false,\n            type: getListTypeField(typeNode.type),\n        };\n    }\n    else if (typeNode.kind === Kind.NON_NULL_TYPE && typeNode.type.kind === Kind.LIST_TYPE) {\n        return Object.assign(getListTypeField(typeNode.type), {\n            required: true,\n        });\n    }\n    else if (typeNode.kind === Kind.NON_NULL_TYPE) {\n        return getListTypeField(typeNode.type);\n    }\n    else {\n        return undefined;\n    }\n}\nexport function getListTypeDepth(listType) {\n    if (listType) {\n        return getListTypeDepth(listType.type) + 1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function getListInnerTypeNode(typeNode) {\n    if (typeNode.kind === Kind.LIST_TYPE) {\n        return getListInnerTypeNode(typeNode.type);\n    }\n    else if (typeNode.kind === Kind.NON_NULL_TYPE && typeNode.type.kind === Kind.LIST_TYPE) {\n        return getListInnerTypeNode(typeNode.type);\n    }\n    else {\n        return typeNode;\n    }\n}\nexport function wrapFieldType(fieldType, listTypeField, listType = 'IEnumerable') {\n    if (listTypeField) {\n        const innerType = wrapFieldType(fieldType, listTypeField.type, listType);\n        return `${listType}<${innerType}>`;\n    }\n    else {\n        return fieldType.innerTypeName;\n    }\n}\n//# sourceMappingURL=utils.js.map","import { ClientSideBaseVisitor, DocumentMode, indentMultiline, getBaseTypeNode, buildScalars, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { print, visit, Kind, isScalarType, } from 'graphql';\nimport { getListInnerTypeNode, C_SHARP_SCALARS, getListTypeField, getListTypeDepth } from '../../common/common';\nconst defaultSuffix = 'GQL';\nconst R_NAME = /name:\\s*\"([^\"]+)\"/;\nfunction R_DEF(directive) {\n    return new RegExp(`\\\\s+\\\\@${directive}\\\\([^)]+\\\\)`, 'gm');\n}\nexport class CSharpOperationsVisitor extends ClientSideBaseVisitor {\n    constructor(schema, fragments, rawConfig, documents) {\n        super(schema, fragments, rawConfig, {\n            namespaceName: rawConfig.namespaceName || 'GraphQLCodeGen',\n            namedClient: rawConfig.namedClient,\n            querySuffix: rawConfig.querySuffix || defaultSuffix,\n            mutationSuffix: rawConfig.mutationSuffix || defaultSuffix,\n            subscriptionSuffix: rawConfig.subscriptionSuffix || defaultSuffix,\n            scalars: buildScalars(schema, rawConfig.scalars, C_SHARP_SCALARS),\n        }, documents);\n        this._operationsToInclude = [];\n        this.overruleConfigSettings();\n        autoBind(this);\n    }\n    // Some settings aren't supported with C#, overruled here\n    overruleConfigSettings() {\n        if (this.config.documentMode === DocumentMode.graphQLTag) {\n            // C# operations does not (yet) support graphQLTag mode\n            this.config.documentMode = DocumentMode.documentNode;\n        }\n    }\n    _operationHasDirective(operation, directive) {\n        if (typeof operation === 'string') {\n            return operation.includes(`${directive}`);\n        }\n        let found = false;\n        visit(operation, {\n            Directive(node) {\n                if (node.name.value === directive) {\n                    found = true;\n                }\n            },\n        });\n        return found;\n    }\n    _extractDirective(operation, directive) {\n        const directives = print(operation).match(R_DEF(directive));\n        if (directives.length > 1) {\n            throw new Error(`The ${directive} directive used multiple times in '${operation.name}' operation`);\n        }\n        return directives[0];\n    }\n    _namedClient(operation) {\n        let name;\n        if (this._operationHasDirective(operation, 'namedClient')) {\n            name = this._extractNamedClient(operation);\n        }\n        else if (this.config.namedClient) {\n            name = this.config.namedClient;\n        }\n        return name ? `client = '${name}';` : '';\n    }\n    _extractNamedClient(operation) {\n        const [, name] = this._extractDirective(operation, 'namedClient').match(R_NAME);\n        return name;\n    }\n    _gql(node) {\n        const fragments = this._transformFragments(node);\n        const doc = this._prepareDocument([print(node), this._includeFragments(fragments)].join('\\n'));\n        return doc.replace(/\"/g, '\"\"');\n    }\n    _getDocumentNodeVariable(node, documentVariableName) {\n        return this.config.documentMode === DocumentMode.external ? `Operations.${node.name.value}` : documentVariableName;\n    }\n    _gqlInputSignature(variable) {\n        const typeNode = variable.type;\n        const innerType = getBaseTypeNode(typeNode);\n        const schemaType = this._schema.getType(innerType.name.value);\n        const name = variable.variable.name.value;\n        const baseType = !isScalarType(schemaType) ? innerType.name.value : this.scalars[schemaType.name] || 'object';\n        const listType = getListTypeField(typeNode);\n        const required = getListInnerTypeNode(typeNode).kind === Kind.NON_NULL_TYPE;\n        return {\n            required: listType ? listType.required : required,\n            signature: !listType\n                ? `${name}=(${baseType})`\n                : `${name}=(${baseType}${'[]'.repeat(getListTypeDepth(listType))})`,\n        };\n    }\n    _operationSuffix(operationType) {\n        switch (operationType) {\n            case 'query':\n                return this.config.querySuffix;\n            case 'mutation':\n                return this.config.mutationSuffix;\n            case 'subscription':\n                return this.config.subscriptionSuffix;\n            default:\n                return defaultSuffix;\n        }\n    }\n    OperationDefinition(node) {\n        var _a;\n        if (!node.name || !node.name.value) {\n            return null;\n        }\n        this._collectedOperations.push(node);\n        const documentVariableName = this.convertName(node, {\n            suffix: this.config.documentVariableSuffix,\n            prefix: this.config.documentVariablePrefix,\n            useTypesPrefix: false,\n        });\n        let documentString = '';\n        if (this.config.documentMode !== DocumentMode.external) {\n            const gqlBlock = indentMultiline(this._gql(node), 4);\n            documentString = `${this.config.noExport ? '' : 'public'} static string ${documentVariableName} = @\"\\n${gqlBlock}\";`;\n        }\n        const operationType = node.operation;\n        const operationTypeSuffix = this.config.dedupeOperationSuffix && node.name.value.toLowerCase().endsWith(node.operation)\n            ? ''\n            : !operationType\n                ? ''\n                : operationType;\n        const operationResultType = this.convertName(node, {\n            suffix: operationTypeSuffix + this._parsedConfig.operationResultSuffix,\n        });\n        const operationVariablesTypes = this.convertName(node, {\n            suffix: operationTypeSuffix + 'Variables',\n        });\n        const serviceName = `${this.convertName(node)}${this._operationSuffix(operationType)}`;\n        this._operationsToInclude.push({\n            node,\n            documentVariableName,\n            operationType,\n            operationResultType,\n            operationVariablesTypes,\n        });\n        const inputSignatures = (_a = node.variableDefinitions) === null || _a === void 0 ? void 0 : _a.map(v => this._gqlInputSignature(v));\n        const hasInputArgs = !!(inputSignatures === null || inputSignatures === void 0 ? void 0 : inputSignatures.length);\n        const inputArgsHint = hasInputArgs\n            ? `\n      /// <para>Required variables:<br/> { ${inputSignatures\n                .filter(sig => sig.required)\n                .map(sig => sig.signature)\n                .join(', ')} }</para>\n      /// <para>Optional variables:<br/> { ${inputSignatures\n                .filter(sig => !sig.required)\n                .map(sig => sig.signature)\n                .join(', ')} }</para>`\n            : '';\n        // Should use ObsoleteAttribute but VS treats warnings as errors which would be super annoying so use remarks comment instead\n        const obsoleteMessage = '/// <remarks>This method is obsolete. Use Request instead.</remarks>';\n        const content = `\n    public class ${serviceName} {\n      /// <summary>\n      /// ${serviceName}.Request ${inputArgsHint}\n      /// </summary>\n      public static GraphQLRequest Request(${hasInputArgs ? 'object variables = null' : ''}) {\n        return new GraphQLRequest {\n          Query = ${this._getDocumentNodeVariable(node, documentVariableName)},\n          OperationName = \"${node.name.value}\"${hasInputArgs\n            ? `,\n          Variables = variables`\n            : ''}\n        };\n      }\n\n      ${obsoleteMessage}\n      public static GraphQLRequest get${serviceName}() {\n        return Request();\n      }\n      ${this._namedClient(node)}\n      ${documentString}\n    }\n    `;\n        return [content].filter(a => a).join('\\n');\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { visit, concatAST, Kind } from 'graphql';\nimport { CSharpOperationsVisitor } from './visitor';\nimport { extname } from 'path';\nimport gql from 'graphql-tag';\nexport const plugin = (schema, documents, config) => {\n    const allAst = concatAST(documents.map(v => v.document));\n    const allFragments = [\n        ...allAst.definitions.filter(d => d.kind === Kind.FRAGMENT_DEFINITION).map(fragmentDef => ({\n            node: fragmentDef,\n            name: fragmentDef.name.value,\n            onType: fragmentDef.typeCondition.name.value,\n            isExternal: false,\n        })),\n        ...(config.externalFragments || []),\n    ];\n    const visitor = new CSharpOperationsVisitor(schema, allFragments, config, documents);\n    const visitorResult = visit(allAst, { leave: visitor });\n    const openNameSpace = `namespace ${visitor.config.namespaceName} {`;\n    return {\n        prepend: [],\n        content: [openNameSpace, ...visitorResult.definitions.filter(t => typeof t === 'string'), '}']\n            .filter(a => a)\n            .join('\\n'),\n    };\n};\nexport const addToSchema = gql `\n  directive @namedClient(name: String!) on OBJECT | FIELD\n`;\nexport const validate = async (schema, documents, config, outputFile) => {\n    if (extname(outputFile) !== '.cs') {\n        throw new Error(`Plugin \"c-sharp-operations\" requires extension to be \".cs\"!`);\n    }\n};\nexport { CSharpOperationsVisitor };\n//# sourceMappingURL=index.js.map"],"names":["Kind","ClientSideBaseVisitor","buildScalars","DocumentMode","visit","print","getBaseTypeNode","isScalarType","indentMultiline","concatAST","extname"],"mappings":"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"}