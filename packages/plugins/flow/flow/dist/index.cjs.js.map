{"version":3,"file":"index.cjs.js","sources":["../../../dist/plugins/flow/flow/src/flow-variables-to-object.js","../../../dist/plugins/flow/flow/src/visitor.js","../../../dist/plugins/flow/flow/src/index.js"],"sourcesContent":["import { OperationVariablesToObject } from '@graphql-codegen/visitor-plugin-common';\nimport { Kind } from 'graphql';\nexport class FlowOperationVariablesToObject extends OperationVariablesToObject {\n    clearOptional(str) {\n        if (str.startsWith('?')) {\n            return str.replace(/^\\?(.*?)$/i, '$1');\n        }\n        return str;\n    }\n    getScalar(name) {\n        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';\n        return `$ElementType<${prefix}Scalars, '${name}'>`;\n    }\n    wrapAstTypeWithModifiers(baseType, typeNode) {\n        if (typeNode.kind === Kind.NON_NULL_TYPE) {\n            const type = this.wrapAstTypeWithModifiers(baseType, typeNode.type);\n            return this.clearOptional(type);\n        }\n        else if (typeNode.kind === Kind.LIST_TYPE) {\n            const innerType = this.wrapAstTypeWithModifiers(baseType, typeNode.type);\n            return `?Array<${innerType}>`;\n        }\n        else {\n            return `?${baseType}`;\n        }\n    }\n    formatFieldString(fieldName, isNonNullType, hasDefaultValue) {\n        if (hasDefaultValue || isNonNullType) {\n            return fieldName;\n        }\n        else {\n            return `${fieldName}?`;\n        }\n    }\n    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {\n        if (hasDefaultValue && !isNonNullType) {\n            return this.clearOptional(fieldType);\n        }\n        return fieldType;\n    }\n}\n//# sourceMappingURL=flow-variables-to-object.js.map","import { Kind, GraphQLEnumType, } from 'graphql';\nimport { BaseTypesVisitor, DeclarationBlock, wrapWithSingleQuotes, indent, transformComment, getConfigValue, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { FlowOperationVariablesToObject } from './flow-variables-to-object';\nexport class FlowVisitor extends BaseTypesVisitor {\n    constructor(schema, pluginConfig) {\n        super(schema, pluginConfig, {\n            useFlowExactObjects: getConfigValue(pluginConfig.useFlowExactObjects, true),\n            useFlowReadOnlyTypes: getConfigValue(pluginConfig.useFlowReadOnlyTypes, false),\n        });\n        autoBind(this);\n        const enumNames = Object.values(schema.getTypeMap())\n            .map(type => (type instanceof GraphQLEnumType ? type.name : undefined))\n            .filter(t => t);\n        this.setArgumentsTransformer(new FlowOperationVariablesToObject(this.scalars, this.convertName, null, enumNames, pluginConfig.enumPrefix));\n        this.setDeclarationBlockConfig({\n            blockWrapper: this.config.useFlowExactObjects ? '|' : '',\n        });\n    }\n    _getScalar(name) {\n        return `$ElementType<Scalars, '${name}'>`;\n    }\n    InputValueDefinition(node, key, parent) {\n        const originalFieldNode = parent[key];\n        const addOptionalSign = originalFieldNode.type.kind !== Kind.NON_NULL_TYPE;\n        const comment = transformComment(node.description, 1);\n        return comment + indent(`${node.name}${addOptionalSign ? '?' : ''}: ${node.type},`);\n    }\n    NamedType(node, key, parent, path, ancestors) {\n        return `?${super.NamedType(node, key, parent, path, ancestors)}`;\n    }\n    ListType(node) {\n        return `?${super.ListType(node)}`;\n    }\n    NonNullType(node) {\n        const baseValue = super.NonNullType(node);\n        if (baseValue.startsWith('?')) {\n            return baseValue.substr(1);\n        }\n        return baseValue;\n    }\n    FieldDefinition(node) {\n        const typeString = node.type;\n        const namePostfix = typeString.startsWith('?') ? '?' : '';\n        const comment = transformComment(node.description, 1);\n        return comment + indent(`${this.config.useFlowReadOnlyTypes ? '+' : ''}${node.name}${namePostfix}: ${typeString},`);\n    }\n    ObjectTypeDefinition(node, key, parent) {\n        return super.ObjectTypeDefinition({\n            ...node,\n            interfaces: node.interfaces && node.interfaces.length > 0\n                ? node.interfaces.map(name => name.replace('?', ''))\n                : [],\n        }, key, parent);\n    }\n    _buildTypeImport(identifier, source) {\n        return `import { type ${identifier} } from '${source}';`;\n    }\n    mergeInterfaces(interfaces, hasOtherFields) {\n        if (!interfaces.length) {\n            return '';\n        }\n        return interfaces.map(i => indent(`...${i}`)).join(',\\n') + (hasOtherFields ? ',\\n  ' : '');\n    }\n    appendInterfacesAndFieldsToBlock(block, interfaces, fields) {\n        block.withBlock(this.mergeInterfaces(interfaces, fields.length > 0) + this.mergeAllFields(fields, interfaces.length > 0));\n    }\n    mergeAllFields(allFields, hasInterfaces) {\n        if (allFields.length === 0) {\n            return '';\n        }\n        if (!hasInterfaces) {\n            return allFields.join('\\n');\n        }\n        return `...{${this.config.useFlowExactObjects ? '|' : ''}\\n${allFields.map(s => indent(s)).join('\\n')}\\n  ${this.config.useFlowExactObjects ? '|' : ''}}`;\n    }\n    handleEnumValueMapper(typeIdentifier, importIdentifier, sourceIdentifier, sourceFile) {\n        let identifier = sourceIdentifier;\n        if (sourceIdentifier !== typeIdentifier && !sourceIdentifier.includes(' as ')) {\n            identifier = `${sourceIdentifier} as ${typeIdentifier}`;\n        }\n        return [this._buildTypeImport(identifier, sourceFile)];\n    }\n    EnumTypeDefinition(node) {\n        const typeName = node.name;\n        if (this.config.enumValues[typeName] && this.config.enumValues[typeName].sourceFile) {\n            return null;\n        }\n        const enumValuesName = this.convertName(node, {\n            suffix: 'Values',\n            useTypesPrefix: this.config.enumPrefix,\n        });\n        const enumValues = new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('const')\n            .withName(enumValuesName)\n            .withMethodCall('Object.freeze', true)\n            .withBlock(node.values\n            .map(enumOption => {\n            const comment = transformComment(enumOption.description, 1);\n            const optionName = this.convertName(enumOption, { transformUnderscore: true, useTypesPrefix: false });\n            let enumValue = enumOption.name;\n            if (this.config.enumValues[typeName] &&\n                this.config.enumValues[typeName].mappedValues &&\n                typeof this.config.enumValues[typeName].mappedValues[enumValue] !== 'undefined') {\n                enumValue = this.config.enumValues[typeName].mappedValues[enumValue];\n            }\n            return comment + indent(`${optionName}: ${wrapWithSingleQuotes(enumValue)}`);\n        })\n            .join(', \\n')).string;\n        const enumType = new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind('type')\n            .withName(this.convertName(node, { useTypesPrefix: this.config.enumPrefix }))\n            .withComment(node.description)\n            .withContent(`$Values<typeof ${enumValuesName}>`).string;\n        return [enumValues, enumType].join('\\n\\n');\n    }\n    getPunctuation(declarationKind) {\n        return declarationKind === 'type' ? ',' : ';';\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { parse, printSchema, visit } from 'graphql';\nimport { FlowVisitor } from './visitor';\nexport * from './visitor';\nexport * from './flow-variables-to-object';\nexport const plugin = (schema, documents, config) => {\n    const header = `// @flow \\n\\n`;\n    const printedSchema = printSchema(schema);\n    const astNode = parse(printedSchema);\n    const visitor = new FlowVisitor(schema, config);\n    const visitorResult = visit(astNode, {\n        leave: visitor,\n    });\n    return {\n        prepend: [header, ...visitor.getEnumsImports()],\n        content: [visitor.scalarsDefinition, ...visitorResult.definitions].join('\\n'),\n    };\n};\n//# sourceMappingURL=index.js.map"],"names":["OperationVariablesToObject","Kind","BaseTypesVisitor","getConfigValue","GraphQLEnumType","transformComment","indent","DeclarationBlock","wrapWithSingleQuotes","printSchema","parse","visit"],"mappings":";;;;;;;;;;AAEO,MAAM,8BAA8B,SAASA,8CAA0B,CAAC;AAC/E,IAAI,aAAa,CAAC,GAAG,EAAE;AACvB,QAAQ,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AACjC,YAAY,OAAO,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AACnD,SAAS;AACT,QAAQ,OAAO,GAAG,CAAC;AACnB,KAAK;AACL,IAAI,SAAS,CAAC,IAAI,EAAE;AACpB,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,GAAG,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC1F,QAAQ,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AAC3D,KAAK;AACL,IAAI,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE;AACjD,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAKC,YAAI,CAAC,aAAa,EAAE;AAClD,YAAY,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;AAChF,YAAY,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC5C,SAAS;AACT,aAAa,IAAI,QAAQ,CAAC,IAAI,KAAKA,YAAI,CAAC,SAAS,EAAE;AACnD,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;AACrF,YAAY,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAC1C,SAAS;AACT,aAAa;AACb,YAAY,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;AAClC,SAAS;AACT,KAAK;AACL,IAAI,iBAAiB,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE;AACjE,QAAQ,IAAI,eAAe,IAAI,aAAa,EAAE;AAC9C,YAAY,OAAO,SAAS,CAAC;AAC7B,SAAS;AACT,aAAa;AACb,YAAY,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AACnC,SAAS;AACT,KAAK;AACL,IAAI,gBAAgB,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE;AAChE,QAAQ,IAAI,eAAe,IAAI,CAAC,aAAa,EAAE;AAC/C,YAAY,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACjD,SAAS;AACT,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL;;ACpCO,MAAM,WAAW,SAASC,oCAAgB,CAAC;AAClD,IAAI,WAAW,CAAC,MAAM,EAAE,YAAY,EAAE;AACtC,QAAQ,KAAK,CAAC,MAAM,EAAE,YAAY,EAAE;AACpC,YAAY,mBAAmB,EAAEC,kCAAc,CAAC,YAAY,CAAC,mBAAmB,EAAE,IAAI,CAAC;AACvF,YAAY,oBAAoB,EAAEA,kCAAc,CAAC,YAAY,CAAC,oBAAoB,EAAE,KAAK,CAAC;AAC1F,SAAS,CAAC,CAAC;AACX,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;AAC5D,aAAa,GAAG,CAAC,IAAI,KAAK,IAAI,YAAYC,uBAAe,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC;AACnF,aAAa,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5B,QAAQ,IAAI,CAAC,uBAAuB,CAAC,IAAI,8BAA8B,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;AACnJ,QAAQ,IAAI,CAAC,yBAAyB,CAAC;AACvC,YAAY,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,GAAG,GAAG,GAAG,EAAE;AACpE,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,UAAU,CAAC,IAAI,EAAE;AACrB,QAAQ,OAAO,CAAC,uBAAuB,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AAClD,KAAK;AACL,IAAI,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE;AAC5C,QAAQ,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC9C,QAAQ,MAAM,eAAe,GAAG,iBAAiB,CAAC,IAAI,CAAC,IAAI,KAAKH,YAAI,CAAC,aAAa,CAAC;AACnF,QAAQ,MAAM,OAAO,GAAGI,oCAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC9D,QAAQ,OAAO,OAAO,GAAGC,0BAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,eAAe,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5F,KAAK;AACL,IAAI,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE;AAClD,QAAQ,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AACzE,KAAK;AACL,IAAI,QAAQ,CAAC,IAAI,EAAE;AACnB,QAAQ,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1C,KAAK;AACL,IAAI,WAAW,CAAC,IAAI,EAAE;AACtB,QAAQ,MAAM,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAClD,QAAQ,IAAI,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AACvC,YAAY,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACvC,SAAS;AACT,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,IAAI,eAAe,CAAC,IAAI,EAAE;AAC1B,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;AACrC,QAAQ,MAAM,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;AAClE,QAAQ,MAAM,OAAO,GAAGD,oCAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC9D,QAAQ,OAAO,OAAO,GAAGC,0BAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5H,KAAK;AACL,IAAI,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE;AAC5C,QAAQ,OAAO,KAAK,CAAC,oBAAoB,CAAC;AAC1C,YAAY,GAAG,IAAI;AACnB,YAAY,UAAU,EAAE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC;AACrE,kBAAkB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACpE,kBAAkB,EAAE;AACpB,SAAS,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;AACxB,KAAK;AACL,IAAI,gBAAgB,CAAC,UAAU,EAAE,MAAM,EAAE;AACzC,QAAQ,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;AACjE,KAAK;AACL,IAAI,eAAe,CAAC,UAAU,EAAE,cAAc,EAAE;AAChD,QAAQ,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AAChC,YAAY,OAAO,EAAE,CAAC;AACtB,SAAS;AACT,QAAQ,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,IAAIA,0BAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,cAAc,GAAG,OAAO,GAAG,EAAE,CAAC,CAAC;AACpG,KAAK;AACL,IAAI,gCAAgC,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE;AAChE,QAAQ,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAClI,KAAK;AACL,IAAI,cAAc,CAAC,SAAS,EAAE,aAAa,EAAE;AAC7C,QAAQ,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AACpC,YAAY,OAAO,EAAE,CAAC;AACtB,SAAS;AACT,QAAQ,IAAI,CAAC,aAAa,EAAE;AAC5B,YAAY,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,SAAS;AACT,QAAQ,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,IAAIA,0BAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AAClK,KAAK;AACL,IAAI,qBAAqB,CAAC,cAAc,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,UAAU,EAAE;AAC1F,QAAQ,IAAI,UAAU,GAAG,gBAAgB,CAAC;AAC1C,QAAQ,IAAI,gBAAgB,KAAK,cAAc,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACvF,YAAY,UAAU,GAAG,CAAC,EAAE,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;AACpE,SAAS;AACT,QAAQ,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AAC/D,KAAK;AACL,IAAI,kBAAkB,CAAC,IAAI,EAAE;AAC7B,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;AACnC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE;AAC7F,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,QAAQ,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AACtD,YAAY,MAAM,EAAE,QAAQ;AAC5B,YAAY,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;AAClD,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,UAAU,GAAG,IAAIC,oCAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC;AAC7E,aAAa,MAAM,EAAE;AACrB,aAAa,MAAM,CAAC,OAAO,CAAC;AAC5B,aAAa,QAAQ,CAAC,cAAc,CAAC;AACrC,aAAa,cAAc,CAAC,eAAe,EAAE,IAAI,CAAC;AAClD,aAAa,SAAS,CAAC,IAAI,CAAC,MAAM;AAClC,aAAa,GAAG,CAAC,UAAU,IAAI;AAC/B,YAAY,MAAM,OAAO,GAAGF,oCAAgB,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AACxE,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,mBAAmB,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;AAClH,YAAY,IAAI,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC;AAC5C,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;AAChD,gBAAgB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,YAAY;AAC7D,gBAAgB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,WAAW,EAAE;AACjG,gBAAgB,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACrF,aAAa;AACb,YAAY,OAAO,OAAO,GAAGC,0BAAM,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,EAAEE,wCAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF,SAAS,CAAC;AACV,aAAa,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;AAClC,QAAQ,MAAM,QAAQ,GAAG,IAAID,oCAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC;AAC3E,aAAa,MAAM,EAAE;AACrB,aAAa,MAAM,CAAC,MAAM,CAAC;AAC3B,aAAa,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;AACzF,aAAa,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;AAC1C,aAAa,WAAW,CAAC,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AACrE,QAAQ,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnD,KAAK;AACL,IAAI,cAAc,CAAC,eAAe,EAAE;AACpC,QAAQ,OAAO,eAAe,KAAK,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC;AACtD,KAAK;AACL;;ACrHY,MAAC,MAAM,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,KAAK;AACrD,IAAI,MAAM,MAAM,GAAG,CAAC,aAAa,CAAC,CAAC;AACnC,IAAI,MAAM,aAAa,GAAGE,mBAAW,CAAC,MAAM,CAAC,CAAC;AAC9C,IAAI,MAAM,OAAO,GAAGC,aAAK,CAAC,aAAa,CAAC,CAAC;AACzC,IAAI,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACpD,IAAI,MAAM,aAAa,GAAGC,aAAK,CAAC,OAAO,EAAE;AACzC,QAAQ,KAAK,EAAE,OAAO;AACtB,KAAK,CAAC,CAAC;AACP,IAAI,OAAO;AACX,QAAQ,OAAO,EAAE,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC;AACvD,QAAQ,OAAO,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;AACrF,KAAK,CAAC;AACN;;;;;;"}